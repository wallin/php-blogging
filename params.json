{"name":"Php-blogging","tagline":"Simple, pluggable, database-free blog engine for PHP using plain file storage","body":"# php-blogging\r\n\r\nIn the spirit of the\r\n[anti-wordpress rage](http://www.typeandgrids.com/blog/goodbye-wordpress-2014-will-be-the-year-of-flat-file-cmses),\r\n`php-blogging` is a simple, pluggable blog engine written in PHP that you just\r\ndrop right in to any directory. It uses plain/flat file storage for maximum\r\nportability and doesn't need any particular configuration.\r\n\r\nIt is designed for developers and does not itself supply any UI components\r\n(like CSS/themes) but is merely an API for handling the blog posts themselves.\r\nHowever, the `example` folder in this repository contains a reference\r\nimplementation of a fully working blog (incl. admin) which illustrates how to\r\nuse the library.\r\n\r\n## Installation\r\n\r\n```bash\r\ngit clone https://github.com/wallin/php-blogging.git\r\n\r\ncd path/to/project\r\nmkdir posts && chmod 777 posts\r\n```\r\n\r\nIn your PHP Code.\r\n```php\r\nrequire 'path/to/php-blogging/lib/Blogpost.php';\r\n\r\n// Optional configuration of storage directory, default is './posts'\r\n// Blogpost::$basePath = './custom-posts';\r\n\r\n// Fetch the latest posts\r\n$posts = Blogpost::all();\r\n```\r\n\r\n## Example\r\n\r\nSee a full example of how to use the library in the  `examples` dir. The\r\n`admin` subdir contains a simple administration tool (written in AngularJS)\r\nwhere you can create, edit and delete posts. It also illustrates the use of\r\n[attributes](#attributes--frontmatter)\r\n\r\n\r\n## Usage\r\n\r\n### Create a new post\r\n\r\n#### Post ID / filename\r\n\r\nAn ID is everything a post need to exist. It will be translated to a file name\r\nwhich will be used to store it's content. For example:\r\n\r\n```php\r\n$post = new Blogpost();\r\n// All that the post need is an ID, which will translate to a filename\r\n$post->setId('my-first-post');\r\n$post->save();\r\n```\r\n\r\nwill yield a file `./posts/my-first-post.md`\r\n\r\n\r\n#### Attributes / Frontmatter\r\n\r\nBy default, the Frontmatter plugin is enables which means that everything you\r\nassign to the post will be saved as YAML at the beginning of the storage file\r\ncontent. For example:\r\n\r\n```php\r\n$post = new Blogpost();\r\n$post->setSource('Dear Diane! The owls are not what they seem');\r\n\r\n// Custom attributes will become YAML\r\n$post->title = \"My first post\";\r\n\r\n// By default, the TitleSlug plugin is enabled, which means that you don't have\r\n// to set and ID manually, but it will instead be set by the plugin by using the\r\n// title. In this case the ID will be 'my-first-post'\r\n// attribute\r\n$post->save();\r\n```\r\n\r\n Will produce a file with content:\r\n```\r\n---\r\ntitle: My first post\r\n---\r\nDear Diane! The owls are not what they seem\r\n```\r\n\r\n### Find a post and display it's contents\r\n\r\nBy default, the Markdown processor plugin is enabled which lets you use\r\nmarkdown as source content. This content will then be rendered into HTML by\r\nthe `render()` method of the post.\r\n\r\n```php\r\n// The post that we created in the previous example can be read back by using\r\n// the ID (which reads file './posts/my-first-post.md'):\r\n\r\n$post = Blogpost::find('my-first-post');\r\n```\r\n\r\nIn the markup the `render` method is used to produce the actual content of the post:\r\n```html\r\n<h1><?= $post->title ?></h1>\r\n<div class=\"content\">\r\n  <?= $post->render() ?>\r\n</div>\r\n```\r\n\r\n### Listing / Quering posts\r\n\r\n```php\r\n// List all posts\r\n$posts = Blogpost::all();\r\n\r\n// Find posts matching a certain attribute\r\n$posts = Blogpost::find()->where('published', true)->result();\r\n```\r\n\r\nBy default the Excerpt plugin is enabled which will generate an 255 character\r\nlong, html-free excerpt which is convenient to use when listing all posts. Example:\r\n\r\n```html\r\n<? foreach($posts as $post): ?>\r\n  <article>\r\n    <h1><?= $post->title ?></h1>\r\n    <div class=\"content\">\r\n      <?= $post->render()->excerpt ?>\r\n    </div>\r\n  <article>\r\n<? endforeach; ?>\r\n```\r\n\r\n## Contributing\r\n\r\n* Create a fork\r\n* Create code and tests\r\n* Run tests with `grunt phpunit`\r\n* Commit\r\n* Make pull request\r\n\r\n## License\r\n\r\nMIT\r\n","google":"UA-7232273-13","note":"Don't delete this file! It's used internally to help with page regeneration."}